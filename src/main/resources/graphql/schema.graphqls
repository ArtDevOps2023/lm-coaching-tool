type Query {
	employees: [Employee]
    employeeById(id: ID): Employee
    section: [Section]
    sectionBySectionId(sectionId: ID): Section
    subsection: [Subsection]
	#JJJ: Flow, FlowSections, EmployeeFlow queries
	employeeFlowsById(id :ID): [EmployeeFlow]
	allFlows: [Flow]
	allFlowsSections: [FlowSection]
	allEmployeeSubsectionStatuses: [EmployeeSubsectionStatus]
	allEmployeeSubsectionStatusesById(id: ID): [EmployeeSubsectionStatus]
}

type Mutation {
	upsertEmployee(form: EmployeeForm): Employee
	deleteEmployee(id: ID!): Boolean
	upsertSection(form: SectionForm): Section
	deleteSection(sectionId: ID!): Boolean
	upsertSubsection(form: SubsectionForm): Subsection
	deleteSubsection(subsectionId: ID!): Boolean
	#JJJ: Flow, FlowSections, EmployeeFlow mutations
	upsertFlow(form: FlowForm): Flow
	deleteFlow(flowId: ID): Boolean
	upsertFlowSection(form: FlowSectionForm): FlowSection
	deleteFlowSection(flowSectionId: ID): Boolean
	upsertEmployeeFlow(form: EmployeeFlowForm): EmployeeFlow
	deleteEmployeeFlow(employeeFlowId: ID): Boolean
	upsertEmployeeSubsectionStatus(form: EmployeeSubsectionStatusForm): EmployeeSubsectionStatus
	deleteEmployeeSubsectionStatus(employeeSubsectionStatusId: ID): Boolean
}

type Employee {
    id: ID
    firstName: String
    lastName: String
    middleName: String
    birthdate: String
    gender: String
    maritalStatus: String
    companyPosition: String
    dateHired: String
	age: Int
	yearsOfExperience: Int
	contacts: [Contact]
	addresses: [Address]
	employeeSubsectionStatuses: [EmployeeSubsectionStatus]
}

type Contact {
	id: ID
	contactNo: String
	isPrimary: Boolean
}

type Address {
	id: ID
	address1: String
	address2: String
	isPrimary: Boolean
}

type Section {
	sectionId: ID
	name: String
	color: String
	colorDescription: String
	subsectionList: [Subsection]
}

type Subsection {
	subsectionId: ID
	sectionId: ID
	description: String
	facilitator: String
	details: String
	targetDay: String
	targetSprint: String
}

type Flow {
	flowId: ID
	name: ID
	flowSections: [FlowSection]
	createdBy: String
	createdDate: String
}

type FlowSection {
	id: ID
	section: Section
	flow: Flow
	sortOrder: Int
}

type EmployeeFlow {
	id: ID
	employee: Employee
	flow:  Flow
	sortOrder: Int
}

type EmployeeSubsectionStatus {
	id: ID
	employee: Employee
	subsection: Subsection
	status: String
	startDate: String
	completedDate: String
}

input EmployeeForm {
    id: ID
    firstName: String!
    lastName: String!
    middleName: String!
    birthdate: String!
    gender: String!
    maritalStatus: String!
    companyPosition: String!
    dateHired: String!
	contacts: [ContactInput]
	addresses: [AddressInput]
}

input ContactInput {
	id: ID
	contactNo: String
	isPrimary: Boolean
}

input AddressInput {
	id: ID
	address1: String
	address2: String
	isPrimary: Boolean
}

input SectionForm {
	sectionId: ID
	name: String!
	color: String!
	colorDescription: String
	subsectionList: [SubsectionForm]
}

input SubsectionForm {
	subsectionId: ID
	sectionId: ID
	description: String!
	facilitator: String
	details: String
	targetDay: String
	targetSprint: String
}

input FlowForm {
	flowId: ID
	name: String
	color: String
}

input FlowSectionForm {
	flowSectionId: ID
	flowId: ID
	sectionId: ID
	sortOrder: Int
}

input EmployeeFlowForm {
	id: ID
	flowId: ID
	employeeId: ID
	sortOrder: Int
}

input EmployeeSubsectionStatusForm{
	id: ID
	employeeId: ID
	subsectionId: ID
	status: String
	startDate: String
	completedDate: String
}